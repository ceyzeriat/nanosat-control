[{"desc": "write in flash", "pid": "bootloader", "param": [["nbytes", "nbytes", "*", "uint8", "1", ""], ["address", "Start address", "*", "uint32", "1", ""], ["data", "program bytes", "*", "uint8", "1;128", ""], ["crc", "crc on command", "*", "uint32", "1", ""]], "lparam": "*", "name": "flash_write", "subsystem": "pld", "number": 251}, {"desc": "read flash", "pid": "bootloader", "param": [["nbytes", "number of bytes to read", "*", "uint8", "1", ""], ["address", "start address", "*", "uint32", "1", ""]], "lparam": 5, "name": "flash_read", "subsystem": "pld", "number": 250}, {"desc": "erase sector", "pid": "bootloader", "param": [["start_address", "start address for the sector", "*", "uint32", "1", ""]], "lparam": 4, "name": "flash_erase", "subsystem": "pld", "number": 252}, {"desc": "reboot the payload", "pid": "bootloader", "param": [], "lparam": 0, "name": "soft_reboot", "subsystem": "pld", "number": 255}, {"desc": "jump to application A", "pid": "bootloader", "param": [], "lparam": 0, "name": "launch_application_A", "subsystem": "pld", "number": 253}, {"desc": "jump to application B", "pid": "bootloader", "param": [], "lparam": 0, "name": "launch_application_B", "subsystem": "pld", "number": 254}, {"desc": "Repeats the message received", "pid": "boarddirector", "param": [["message", "message", "*", "uint8", "1;128", ""]], "lparam": "*", "name": "echo_pld", "subsystem": "pld", "number": 101}, {"desc": "move piezo at given position", "pid": "boarddirector", "param": [["xcom", "command on x axis", "*", "uint16", "1", "adu"], ["ycom", "command on y axis", "*", "uint16", "1", "adu"]], "lparam": 4, "name": "move_piezo", "subsystem": "pld", "number": 102}, {"desc": "turn on (255) or off (0) the high voltage transformer", "pid": "boarddirector", "param": [["state", "state (on=255 or off=0)", "0,255", "uint8", "1", ""]], "lparam": 1, "name": "hv_switch", "subsystem": "pld", "number": 103}, {"desc": "turn on (255) or off (0) the diode", "pid": "boarddirector", "param": [["state", "state (on=255 or off=0)", "0,255", "uint8", "1", ""]], "lparam": 1, "name": "diode_switch", "subsystem": "pld", "number": 104}, {"desc": "turn on (255) or off (0) the piezo DACs", "pid": "boarddirector", "param": [["state", "state (on=255 or off=0)", "0,255", "uint8", "1", ""]], "lparam": 1, "name": "dac_switch", "subsystem": "pld", "number": 105}, {"desc": "turn on (255) or off (0) the TEC module", "pid": "boarddirector", "param": [["state", "state (on=255 or off=0)", "0,255", "uint8", "1", ""]], "lparam": 1, "name": "tec_switch", "subsystem": "pld", "number": 106}, {"desc": "set param", "pid": "boarddirector", "param": [["destPid", "destination PID", "1,2,3,4,5,6", "uint8", "1", ""], ["key", "parameter key", "*", "uint8", "1", ""], ["value", "new value", "*", "uint32", "1", ""]], "lparam": 6, "name": "set_param", "subsystem": "pld", "number": 107}, {"desc": "get param", "pid": "boarddirector", "param": [["destPid", "destination Pid", "1,2,3,4,5,6", "uint8", "1", ""], ["key", "parameter key", "*", "uint8", "1", ""]], "lparam": 2, "name": "get_param", "subsystem": "pld", "number": 108}, {"desc": "transition to given mode", "pid": "boarddirector", "param": [["mode", "mode (SBY=0, IDL=1, SCI=2, SLV=3, TST=4)", "*", "uint8", "1", ""]], "lparam": 1, "name": "change_mode", "subsystem": "pld", "number": 109}, {"desc": "reset", "pid": "boarddirector", "param": [], "lparam": 0, "name": "reset", "subsystem": "pld", "number": 110}, {"desc": "start automatic transmission of hk data", "pid": "boarddirector", "param": [["flags", "requested hks (flags)", "0;4095", "uint16", "1", ""], ["hkTick", "hk tick value", "*", "uint16", "1", "ms"], ["hkPacketTick", "hk packet tick value", "*", "uint16", "1", "ms"]], "lparam": 6, "name": "start_hk", "subsystem": "pld", "number": 112}, {"desc": "stop automatic transmission of hk data", "pid": "boarddirector", "param": [], "lparam": 0, "name": "stop_hk", "subsystem": "pld", "number": 113}, {"desc": "set the tempertaure setpoint of the TEC", "pid": "boarddirector", "param": [["value", "setpoint value (approx: 32767 = 14 deg C, 0 = 2 deg C)", "*", "uint16", "1", "adu"]], "lparam": 2, "name": "set_temperature", "subsystem": "pld", "number": 114}, {"desc": "set the integration time", "pid": "boarddirector", "param": [["value", "integration time", "*", "uint16", "1", "ms/10"]], "lparam": 2, "name": "set_integrationTime", "subsystem": "pld", "number": 115}, {"desc": "set the delay between two integrations", "pid": "boarddirector", "param": [["value", "delay", "*", "uint16", "1", "ms/10"]], "lparam": 2, "name": "set_delay", "subsystem": "pld", "number": 116}, {"desc": "change the frequency of sysclock", "pid": "boarddirector", "param": [["freq", "freq", "8,16,24,32,40,48,56,64,72", "uint8", "1", "MHz"]], "lparam": 1, "name": "change_sysclock_freq", "subsystem": "pld", "number": 117}, {"desc": "synchronize date and time with the computer", "pid": "boarddirector", "param": [["years", "years", "0;60", "uint8", "1", ""], ["months", "months", "1;12", "uint8", "1", ""], ["days", "days", "1;31", "uint8", "1", ""], ["hours", "hours", "0;23", "uint8", "1", ""], ["minutes", "minutes", "0;59", "uint8", "1", ""], ["seconds", "seconds", "0;59", "uint8", "1", ""]], "lparam": 6, "name": "set_datetime", "subsystem": "pld", "number": 111}, {"desc": "do one integration and send back the result", "pid": "boarddirector", "param": [], "lparam": 0, "name": "get_counts", "subsystem": "pld", "number": 118}, {"pid": "l0commanager", "name": "echo", "number": 1, "desc": "Picsat receives a message (2 chars) and replies with the same message", "param": [["message", "message", "32;127", "str", "2", "ASCII"]], "lparam": 2, "subsystem": "obc"}, {"pid": "l0commanager", "name": "loadL1", "number": 2, "desc": "Manually load the l1 level", "param": [["loadL1Source", "loadL1Source", "1;3", "uint8", "1", ""], ["param", "a Gericos parameter of l1AppDefine() named `param`, usage: a complete mystery", "*", "uint32", "1", ""]], "lparam": 5, "subsystem": "obc"}, {"pid": "l0housekeeper", "name": "getL0Hk", "number": 3, "desc": "Triggers transmission of all l0 HK", "param": [["part", "part of the L0 HK to get (part1 or part2)", "1;2", "uint8", "1", ""]], "lparam": 1, "subsystem": "all_l0"}, {"pid": "l0commanager", "name": "getRtc", "number": 4, "desc": "gets the RTC date (unix time in seconds)", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0commanager", "name": "setRtc", "number": 5, "desc": "Sets the RTC date (unix time in seconds) and resets the cpuTickCount to prevent bugs on timeTag values", "param": [["posixTime", "posix time (unix), in secs since 1 Jan 1970", "1261440000;1890000000", "uint32", "1", "seconds"]], "lparam": 4, "subsystem": "obc"}, {"pid": "l0commanager", "name": "countFramLogEntries", "number": 6, "desc": "count the number of fram log entries (using the sdram log copy), with funErrCode between funErrMin and funErrMax included, and with fileCrcCode = fileCrc", "param": [["funErrMin", "maximum function err code for search", "", "int16", "1", ""], ["funErrMax", "minimum function err code for search", "", "int16", "1", ""], ["fileCrc", "file CRC code for search. Use fileCrc = 0xFF to accept all files", "", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0commanager", "name": "i2cWrite", "number": 10, "desc": "", "param": [["address", "I2C address", "*", "int32", "1", ""], ["busDataSize", "", "*", "uint16", "1", ""], ["busData", "", "*", "uint8", "*", ""]], "lparam": "*", "subsystem": "obc"}, {"pid": "l0commanager", "name": "i2cWriteRead", "number": 11, "desc": "Use I2C to forward a commad to a subsystem, directly on the I2C address, then reads I2C after a delay and emits the reply in a telemetry", "param": [["address", "I2C address", "*", "int32", "1", ""], ["writeDataSize", "1;(TCPACKET_MAX_DATA_SIZE-6)", "*", "uint16", "*", ""], ["readDataSize", "", "*", "uint16", "*", ""], ["writeReadDelay", "", "*", "uint32", "1", "number_of_ticks"], ["writeData", "The size", "*", "uint8", "*", ""]], "lparam": "*", "subsystem": "obc"}, {"pid": "l0commanager", "name": "softRebootObc", "number": 12, "desc": "Soft reboot OBC", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0commanager", "name": "hardRebootObc", "number": 13, "desc": "Hard reboot OBC", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0epsmanager", "name": "softRebootEps", "number": 14, "desc": "Soft reboot EPS", "param": [], "lparam": 0, "subsystem": "eps"}, {"pid": "l0epsmanager", "name": "hardRebootEps", "number": 15, "desc": "Hard reboot EPS", "param": [], "lparam": 0, "subsystem": "eps"}, {"pid": "l0epsmanager", "name": "kickEpsDedicatedWatchdog", "number": 16, "desc": "Kicks the Eps dedicated watchdog (P>1h, 1 kick on each pass recommanded)", "param": [], "lparam": 0, "subsystem": "eps"}, {"pid": "l0commanager", "name": "emitLastFramLogEntries", "number": 17, "desc": "emits the last nEntries logEntries in the fram log", "param": [["nEntries", "number of entries to emit", "1;100", "uint16", "1", ""]], "lparam": 2, "subsystem": "obc"}, {"pid": "l0commanager", "name": "emitLastEventReports", "number": 18, "desc": "re-emits the last nEntries events preivously reported", "param": [["nEntries", "number of event to re-emit", "1;100", "uint16", "1", ""]], "lparam": 2, "subsystem": "obc"}, {"pid": "l0commanager", "name": "emitTestEventReport", "number": 19, "desc": "emits an test event report frame with the error code (EC_baseTestErrorCode = 1000)+errorCodeOffset", "param": [["errorCodeOffset", "test error code offset", "0;255", "uint8", "1", ""]], "lparam": 1, "subsystem": "obc"}, {"pid": "l0commanager", "name": "logFramLogTestEntry", "number": 20, "desc": "adds a test entry into the fram log with the error code (EC_baseTestErrorCode = 1000)+errorCodeOffset", "param": [["errorCodeOffset", "test error code offset", "0;255", "uint8", "1", ""]], "lparam": 1, "subsystem": "obc"}, {"pid": "l0commanager", "name": "paramDataValueCheck", "number": 21, "desc": "for all available different numerical types, onboard printf of the param values.Return as data the values of each param (endianess conversions check)", "param": [["testUint8", "testUint8", "*", "uint8", "1", ""], ["testInt8", "testInt8", "*", "int8", "1", ""], ["testUint16", "testUint16", "*", "uint16", "1", ""], ["testInt16", "testInt16", "*", "int16", "1", ""], ["testUint32", "testUint32", "*", "uint32", "1", ""], ["testInt32", "testInt32", "*", "int32", "1", ""], ["testUint64", "testUint64", "*", "uint64", "1", ""], ["testInt64", "testInt64", "*", "int64", "1", ""]], "lparam": 30, "subsystem": "obc"}, {"pid": "l0commanager", "name": "forceAntsDeploy", "number": 23, "desc": "Forced deployment of ants systems (override deploy ISIS function), of all antennas", "param": [], "lparam": 0, "subsystem": "ants"}, {"pid": "l0sdcardmanager", "name": "sdCardsForceFileSystemInit", "number": 24, "desc": "initialize the sd cards file system. Also takes care of the physical powering/initialization of the sd cards (init step 1)", "param": [], "lparam": 0, "subsystem": "s_card"}, {"pid": "l0sdcardmanager", "name": "sdCardsFileSystemInit", "number": 25, "desc": "initialize the sd cards file system if not already initialized. Also takes care of the physical powering/initialization of the sd cards (init step 1)", "param": [], "lparam": 0, "subsystem": "sd_card"}, {"pid": "l0sdcardmanager", "name": "sdCardInitVolume", "number": 26, "desc": "initialize the file system on the selected sd card (init step 2)", "param": [["sdCardSelect", "sd card select (0 or 1)", "0;1", "uint8", "1", ""]], "lparam": 1, "subsystem": "sd_card"}, {"pid": "l0sdcardmanager", "name": "sdCardFormat", "number": 27, "desc": "format the selected partition in the active sd card (defined at the sdCardInitVolume step)", "param": [["sdCardSelect", "sd card select (0 or 1)", "0;1", "uint8", "1", ""]], "lparam": 1, "subsystem": "sd_card"}, {"pid": "l0sdcardmanager", "name": "sdCardFileTest", "number": 28, "desc": "file test on the selected sd card: creates / writes / reads / deletes a test file", "param": [["sdCardSelect", "sd card select (0 or 1)", "0;1", "uint8", "1", ""]], "lparam": 1, "subsystem": "sd_card"}, {"pid": "l0commanager", "name": "getLast3AckExec", "number": 30, "desc": "resends the last 3 execution acknowledges", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "setUint8L0Flag", "number": 31, "desc": "sets the value of the uint8 fram flag identified by index", "param": [["index", "index of flag", "*", "uint8", "1", ""], ["flagScope", "flagScope (0: fram, 1: fram+sdram, 2: sdram)", "0;2", "uint8", "1", ""], ["flagValue", "flag value", "*", "uint8", "1", ""]], "lparam": 3, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "getUint8L0Flag", "number": 32, "desc": "returns the value of the uint8 fram flag identified by index", "param": [["index", "index of flag", "*", "uint8", "1", ""], ["flagScope", "flagScope (0: fram, 2: sdram)", "0;2", "uint8", "1", ""]], "lparam": 2, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "resetAllFramFlags", "number": 33, "desc": "sets the FRAM flag area to 0xFF, this also sets all the flag values to their default values", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "clearFramLog", "number": 34, "desc": "clears fram log entirely, all values are set of 0xFF (~30 sec exec time)", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "clearFramLogCounters", "number": 35, "desc": "clears fram log counter values, all values are set of 0xFF (~3 sec exec time). Fram log should be considered empty aftre this command.", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "abortAllDumps", "number": 40, "desc": "Stop the execution of all dumps running in background", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "StartDumpNORFLASHRange", "number": 41, "desc": "Triggers transmission of the norflash content between start_address and start_address+bytes_number to ground for verification (for patching)Return telemetry: data dumped", "param": [["start_address", "", "0;0x100000", "uint32", "1", ""], ["bytes_number", "", "0;0x100000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "StartDumpFRAM", "number": 42, "desc": "Triggers transmission of the FRAM content between start_address and start_address+bytes_numberReturn telemetry: data dumped", "param": [["start_address", "", "0;0x3FFFF", "uint32", "1", ""], ["bytes_number", "", "0;0x3FFFF", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "StartDumpAnySDRAMRange", "number": 43, "desc": "Triggers transmission of the SDRAM content between start_address and start_address+bytes_number to ground for verification. Can be used to check any variable value or buffer value with it's address from map.txtReturn telemetry: data dumped", "param": [["start_address", "", "0;0xFFFFFFFF", "uint32", "1", ""], ["bytes_number", "", "0;0xFFFFFFFF", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "StartDumpSDCardL1PriRange", "number": 44, "desc": "Triggers transmission of the SDCard Primary L1 image content between start_address and start_address+bytes_numberto ground for verification (for patching)Return telemetry: data dumped", "param": [["start_address", "", "0;0x400000", "uint32", "1", ""], ["bytes_number", "", "0;0x400000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "StartDumpSDCardL1SecRange", "number": 45, "desc": "Triggers transmission of the SDCard Secondary L1 image content between start_address and start_address+bytes_numberto ground for verification (for patching)Return telemetry: data dumped", "param": [["start_address", "", "0;0x400000", "uint32", "1", ""], ["bytes_number", "", "0;0x400000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "writeAnySDRAMRange", "number": 46, "desc": "Write the SDRAM content on any adress between start_address and start_address+bytes_number.Can be used to modify any variable value or buffer value with it's adress from map.txt", "param": [["start_address", "", "0;0xFFFFFFFF", "uint32", "1", ""], ["bytes_number", "", "*", "uint32", "1", ""], ["data", "", "*", "uint8", "*", ""]], "lparam": "*", "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "writeFRAMRange", "number": 47, "desc": "Write the FRAM content between start_address and start_address+bytes_numberWith a maximum data size of 212 bytes in a frame, the worst execution time will be around 300 ms", "param": [["start_address", "", "0;0x3FFFF", "uint32", "1", ""], ["bytes_number", "", "*", "uint32", "1", ""], ["data", "", "*", "uint8", "*", ""]], "lparam": "*", "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "computeCRC32OnNORFLASHRange", "number": 48, "desc": "Compute the CRC32 on norflash content between start_address and start_address+bytes_number to ground for verification (for patching)Returns Telemetry: CRC32", "param": [["TargetAdress", "", "0;0x100000", "uint32", "1", ""], ["DataSize", "", "0;0x100000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "computeCRC32OnAnySDRAMRange", "number": 49, "desc": "Compute the CRC32 on any SDRAM adress between start_address and start_address+bytes_number to ground for verification (example: Check that a class is properly loaded)Returns Telemetry: CRC32", "param": [["TargetAdress", "", "0;0xFFFFFFFF", "uint32", "1", ""], ["DataSize", "", "0;0xFFFFFFFF", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "computeCRC32OnL1SDPriRange", "number": 50, "desc": "Compute the CRC32 on SDCard Primary L1 image content between start_address and start_address+bytes_number to ground for verification (for patching)Returns Telemetry: CRC32", "param": [["TargetAdress", "TargetAddress of L1 image on SDCard; 0 Start at &l1AppDefine", "0;0x100000", "uint32", "1", ""], ["DataSize", "", "0;0x100000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "computeCRC32OnL1SDSecRange", "number": 51, "desc": "Compute the CRC32 on SDCard Secondary L1 image content between start_address and start_address+bytes_numberto ground for verification (for patching)Returns Telemetry: CRC32", "param": [["TargetAdress", "TargetAddress of L1 image on SDCard; 0 Start at &l1AppDefine", "0;0x100000", "uint32", "1", ""], ["DataSize", "", "0;0x100000", "uint32", "1", ""]], "lparam": 8, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "computeCurrentL1CRC32", "number": 52, "desc": "Compute the CRC32 on WHOLE L1 image for selected L1 source.This is used by ground segment for verification (check correct application of patch, and also check \"version\" of L1 currently loaded on satellite)Returns Telemetry: CRC32", "param": [["L1Source", "L1 Image starts from &l1AppDefine to SDCARDMAXL1FILESIZE , unused space above L1 padded with ZEROSNORFLASH = 0x01,SDCARD_PRI = 0x02,SDCARD_SEC = 0x03,", "1;3", "uint8", "1", ""]], "lparam": 1, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "getFramExpectedL1CRC32", "number": 55, "desc": "Get the expected CRC32 value of L1 for selected L1 source.This value is checked before allowing to load L1 on boot.This value is stored in FRAM.Returns Telemetry: CRC32", "param": [["L1Source", "L1 Image starts from &l1AppDefine to SDCARDMAXL1FILESIZE , unused space above L1 padded with ZEROS.NORFLASH = 0x01,SDCARD_PRI = 0x02,SDCARD_SEC = 0x03,", "1;3", "uint8", "1", ""]], "lparam": 1, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "setFramExpectedL1CRC32", "number": 56, "desc": "Set the expected CRC32 of L1 for selected L1 source.This value is checked before allowing to load L1 on boot.This value is stored in FRAM.", "param": [["L1Source", "L1 Image starts from &l1AppDefine to SDCARDMAXL1FILESIZE , unused space above L1 padded with ZEROS.NORFLASH = 0x01,SDCARD_PRI = 0x02,SDCARD_SEC = 0x03,", "1;3", "uint8", "1", ""], ["ExpectedCRC32", "", "0;0xFFFFFFFF", "uint32", "4", ""]], "lparam": 5, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "startPatch", "number": 61, "desc": "Initialize a L1 patch session and set the number of memory segments contained in the patch. The maximum allowed number of segments is 1024This function shall be called first before patching any memory segment", "param": [["NbOfSegments", "Total number of segments in the patch", "0;1024", "uint16", "1", ""]], "lparam": 2, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "pushMemSegment", "number": 62, "desc": "Send a memory segment to patch L1 between start_address and start_address+bytes_numberNote: This function only stores the memory segment in a SDRAM buffer when pushed. The effective writing in norflash will be performed by the command: WritePatchToNORFlashThe maximum size of data in Segment is 230 bytes", "param": [["patchId", "total size=8+n", "0;1024", "uint16", "1", ""], ["targetAdress", "Adress to be patched. Reference: 0=first byte of.bin file.Only adresses of L1 area are allowed to be patched.So the allowed patch adress range is: &l1AppDefine in .bin file until&l1AppDefine in .bin file + SDCARDMAXL1FILESIZE(1024*1024)", "0x0007FFFF;0x00180000", "uint32", "1", ""], ["dataSize", "", "*", "uint16", "1", ""], ["data", "Data (in*)", "*", "uint8", "*", ""]], "lparam": "*", "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "getPatchState", "number": 63, "desc": "Get the status of patch sessionReturn telemetry", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "getListIdReceivedSegments", "number": 64, "desc": "Get the list of segments ID currently received by the satelliteReturn telemetry", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "getListIdMissingSegments", "number": 65, "desc": "Get the list of segments ID missing to perform the patch.Return telemetry", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "validateAndWritePatch", "number": 66, "desc": "This function perform the writing of L1 image on source passed as parameter of the previously uploaded memory segmentsRun condition: If all segments are received and CRC32 on datas valid", "param": [["L1Source", "NORFLASH = 0x01,SDCARD_PRI = 0x02,SDCARD_SEC = 0x03,", "1;3", "uint8", "1", ""], ["expectedCRC32AllDatas", "", "0;0xFFFFFFFF", "uint32", "1", ""]], "lparam": 5, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "copyNorFlashToSdCardPri", "number": 69, "desc": "Copy L1 image from NORFlash to SdCardPri image file", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "copyNorFlashToSdCardSec", "number": 70, "desc": "Copy L1 image from NORFlash to SdCardSec image file", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "copySdCardPriToSec", "number": 71, "desc": "Copy L1 image from SdCardPri to SdCardSec image file", "param": [], "lparam": 0, "subsystem": "obc"}, {"pid": "l0memorymanager", "name": "copySdCardSecToPri", "number": 72, "desc": "Copy L1 image from SdCardSec to SdCardPri image file", "param": [], "lparam": 0, "subsystem": "obc"}]