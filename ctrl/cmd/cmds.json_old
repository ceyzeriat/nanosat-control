[{"subsystem": "obc", "lparam": 2, "name": "echo", "pid": "L0ComManager", "number": 1, "param": [["message", "the message", "0;255", "str", 2, null]], "desc": "Picsat receives a message (2 chars) and replies with the same message"}, {"subsystem": "obc", "lparam": 3, "name": "get_status", "pid": "L0ComManager", "number": 2, "param": [["id", "the id", "0;255", "uint8", 1, null], ["mode", "the mode", "0;255", "uint8", 2, null]], "desc": "Youhou !"}, {"subsystem": "obc", "lparam": 30, "name": "paramDataValueCheck", "pid": "L0ComManager", "number": 21, "param": [["uint8", "the uint8 to test", "0;255", "uint8", 1, null], ["int8", "the int8 to test", "-128;127", "int8", 1, null], ["uint16", "the uint16 to test", "0;65535", "uint16", 1, null], ["int16", "the int16 to test", "-32768;32767", "int16", 1, null], ["uint32", "the uint32 to test", "0;4294967295", "uint32", 1, null], ["int32", "the int32 to test", "-2147483648;2147483647", "int32", 1, null], ["uint64", "the uint64 to test", "0;18446744073709551615", "uint64", 1, null], ["int64", "the int64 to test", "-9223372036854775808;9223372036854775807", "int64", 1, null]], "desc": "for all available different numerical types, if the configuration is test (engineering model) do an onboard printf of the param values. Always return as data (in a telemetry) the values of different types of param, to check for endianess conversions"}, {"subsystem": "obc", "lparam": 8, "name": "computeCRC32OnNORFLASH", "pid": "L0MemoryManager", "number": 48, "param": [["start_address", "", "0;0x100000", "uint32", "4", ""], ["bytes_number", "", "0;0x100000", "uint32", "4", ""]], "desc": "Compute the CRC32 on norflash content betweenstart_addressandstart_address+bytes_numberto ground for verification (for patching)\nReturns Telemetry: CRC32"}, {"subsystem": "obc", "lparam": 2, "name": "startPatch", "pid": "L0MemoryManager", "number": 52, "param": [["nbOfSegments", "", "", "uint16", "2", ""]], "desc": "Initialize a L1 patch session and set the number of memory segments contained in the patch. The maximum number of segments is 1024\nThis function shall be called first before patching any memory segment"}, {"subsystem": "obc", "lparam": "*", "name": "pushMemSegment", "pid": "L0MemoryManager", "number": 53, "param": [["patchId", "", "", "uint16", "2", ""], ["targetAdress", "", "", "uint32", "4", ""], ["dataSize", "", "", "uint16", "2", ""], ["data", "", "", "uint8", "0;512", ""]], "desc": "Send a memory segment to patch L1 between start_address and start_address+bytes_number\nNote: This function only stores the memory segment in a SDRAM buffer when pushed. The effective writing in norflash will be performed by the command: WritePatchToNORFlash\n\nThe maximum size of data in Segment is 504 bytes"}, {"subsystem": "obc", "lparam": 0, "name": "getPatchState", "pid": "L0MemoryManager", "number": 54, "param": [], "desc": "Get the status of patch session\nReturn telemetry"}, {"subsystem": "obc", "lparam": 0, "name": "getListIdReceivedSegments", "pid": "L0MemoryManager", "number": 55, "param": [], "desc": "Get the list of segments ID currently received by the satellite\nReturn telemetry"}, {"subsystem": "obc", "lparam": 0, "name": "getListIdMissingSegments", "pid": "L0MemoryManager", "number": 56, "param": [], "desc": "Get the list of segments ID missing to perform the patch.\nReturn telemetry"}, {"subsystem": "obc", "lparam": 4, "name": "validatePatch", "pid": "L0MemoryManager", "number": 57, "param": [["crc", "expectedCRC32AllDatas", "0;0xFFFFFFFF", "uint32", "4", ""]], "desc": "Check if all expected segments are received\nCheck if actual CRC32 of data match the expected CRC32. If yes, return OK(0)"}, {"subsystem": "obc", "lparam": 0, "name": "writePatchToNORFlash", "pid": "L0MemoryManager", "number": 58, "param": [], "desc": "This function perform the writing in NORFLASH of the previously uploaded memory segments\nRun condition: If all segments are received and CRC32 on datas valid"}, {"subsystem": "obc", "lparam": 0, "name": "writePatchToSDCardL1Pri", "pid": "L0MemoryManager", "number": 59, "param": [], "desc": "This function perform the writing in SDCard Primary L1 image of the previously uploaded memory segments\nRun condition: If all segments are received and CRC32 on datas valid"}, {"subsystem": "obc", "lparam": 0, "name": "writePatchToSDCardL1Sec", "pid": "L0MemoryManager", "number": 60, "param": [], "desc": "This function perform the writing in SDCard Secondary L1 image of the previously uploaded memory segments\nRun condition: If all segments are received and CRC32 on datas valid"}, {"subsystem": "obc", "lparam": 1, "name": "setAutoLoadL1Counter", "pid": "L0MemoryManager", "number": 61, "param": [["nLoad", "NbL1AutomaticLoad, 0;0xFE, 0xFF=Undefined", "0;0xFF", "uint8", "1", ""]], "desc": "Set the number of allowed automatic load of L1 when OBC is rebooted.\nThis value is stored in FRAM.\nThis counter is decremented on each reboot.\nWhen this counter reached the value 0 or is initialised with the value 0xFF, no automatic load of L1 is performed"}, {"subsystem": "obc", "lparam": 0, "name": "getAutoLoadL1Counter", "pid": "L0MemoryManager", "number": 62, "param": [], "desc": "Get the number of remaining automatic load of L1 when OBC is rebooted.\nThis value is stored in FRAM."}, {"subsystem": "obc", "lparam": 1, "name": "setLoadL1Source", "pid": "L0MemoryManager", "number": 63, "param": [["sourceStorage", "SourceL1Storage, 0=NORFlash, 0xFF=Undefined", "0;0xFF", "uint8", "1", ""]], "desc": "Set the memory source to Load L1: NorFlash/SDPri/SDSec\nThis value is stored in FRAM. See FRAM document for possible values"}, {"subsystem": "obc", "lparam": 0, "name": "getLoadL1Source", "pid": "L0MemoryManager", "number": 64, "param": [], "desc": "Get the memory source to Load L1.\nThis value is stored in FRAM.See FRAM document for possible values"}]